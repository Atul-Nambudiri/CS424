#include <SerialStream.h>
#include "irobot-create.hh"
#include "RobotSafety.hh"
#include <ctime>
#include <iostream>
#include <chrono>
#include <thread>
#include <pthread.h>
#include <mutex>
#include <vector>
#include <raspicam/raspicam_cv.h>
#include "RobotVision.hh"

using namespace iRobot;
using namespace LibSerial;
using namespace std;

pthread_mutex_t stream_mutex;
int speed = 100;

void moveCounterClockwise(Create& robot){
    pthread_mutex_lock(&stream_mutex);
    robot.sendDriveCommand(30, Create::DRIVE_INPLACE_COUNTERCLOCKWISE);
    int current_signal = robot.wallSignal();
    int max = current_signal;
    while (max - current_signal < 3) {
        current_signal = robot.wallSignal();
        if (current_signal > max) {
            max = current_signal;
        }
    }
    robot.sendDriveCommand(0, Create::DRIVE_STRAIGHT);
    pthread_mutex_unlock(&stream_mutex);
}


void moveClockwise(Create& robot){
    pthread_mutex_lock(&stream_mutex);
    robot.sendDriveCommand(30, Create::DRIVE_INPLACE_CLOCKWISE);
    int current_signal = robot.wallSignal();
    int max = current_signal;
    while (5 > max - current_signal && max - current_signal > -5) {
        current_signal = robot.wallSignal();
        if (current_signal > max) {
            max = current_signal;
        }
    }
    robot.sendDriveCommand(0, Create::DRIVE_STRAIGHT);
    pthread_mutex_unlock(&stream_mutex);
}

void * mainThread(void * args) {
    RobotSafetyStruct * info = (RobotSafetyStruct *) args;
    Create robot = *(info->robot);

    cout << "Driving straight" << endl;
    pthread_mutex_lock(&stream_mutex);
    robot.sendDriveCommand (speed, Create::DRIVE_STRAIGHT);
    pthread_mutex_unlock(&stream_mutex);

    while (1) {
        pthread_mutex_lock(&stream_mutex);
        if (robot.bumpLeft() && robot.bumpRight()) {
            cout << "Bump!" << endl;
            robot.sendDriveCommand(-60, Create::DRIVE_STRAIGHT);
            this_thread::sleep_for(chrono::milliseconds(1000));
            robot.sendDriveCommand(0, Create::DRIVE_STRAIGHT);
            pthread_mutex_unlock(&stream_mutex);
            moveCounterClockwise(robot);
        } else {
            pthread_mutex_unlock(&stream_mutex);
        }
    }
    return NULL;
}

int main ()
{
  	char serial_loc[] = "/dev/ttyUSB0";

  	try
  	{
        cout << "Test" << endl;
    		// raspicam::RaspiCam_Cv Camera;
    		// cv::Mat rgb_image, bgr_image;
    		// if (!Camera.open()) {
      //   		cerr << "Error opening the camera" << endl;
      //   		return -1;
      // 	}
      	cout << "Opened Camera" << endl;
      	SerialStream stream (serial_loc, LibSerial::SerialStreamBuf::BAUD_57600);
      	cout << "Opened Serial Stream to" << serial_loc << endl;
      	this_thread::sleep_for(chrono::milliseconds(1000));
      	Create robot(stream);
        cout << "test" << endl;
      	cout << "Created iRobot Object" << endl;
      	robot.sendFullCommand();
      	cout << "Setting iRobot to Full Mode" << endl;
      	this_thread::sleep_for(chrono::milliseconds(1000));
      	cout << "Robot is ready" << endl;
  	
    		// Set up the song to play
    		Create::note_t note1(50, 50);
    	
    		Create::song_t song;
    		song.push_back(note1);	
    	
    		robot.sendSongCommand(0, song);

		/* Sensor packet structure: 
		 * 1 byte header
		 * 1 byte size
		 * 1 byte packet id
		 * # bytes data (defined by packet) 
		 * ...
		 * 1 byte checksum */

      	// Let's stream some sensors.
      	Create::sensorPackets_t sensors;
      	sensors.push_back(Create::SENSOR_BUMPS_WHEELS_DROPS); /* 1 data byte */
        sensors.push_back(Create::SENSOR_OVERCURRENTS); /* 1 data byte + 2 possible unused bytes */
      	sensors.push_back(Create::SENSOR_WALL_SIGNAL); /* 2 data bytes */
		    sensors.push_back(Create::SENSOR_CLIFF_LEFT_SIGNAL);
    		sensors.push_back(Create::SENSOR_CLIFF_FRONT_LEFT_SIGNAL);
    		sensors.push_back(Create::SENSOR_CLIFF_FRONT_RIGHT_SIGNAL);
    		sensors.push_back(Create::SENSOR_CLIFF_RIGHT_SIGNAL);
      	sensors.push_back (Create::SENSOR_BUTTONS);
        //sensors.push_back(Create::SENSOR_GROUP_0);
        //sensors.push_back(Create::SENSOR_GROUP_3);

      	robot.sendStreamCommand (sensors);
      	cout << "Sent Stream Command" << endl;
		
        pthread_mutex_init(&stream_mutex, NULL);

        //Start the Robot safety threads
        pthread_t overcurrent_thread, cliff_wheelDrop_thread, objectID, main_thread;
        pthread_attr_t cliffAttr, mainAttr, visionAttr, OCAttr;
        struct sched_param cliffParam, mainParam, visionParam, OCParam;
   
        if (pthread_attr_init(&cliffAttr) != 0) {
            perror("attr_init cliffAttr");
        }
        if (pthread_attr_init(&mainAttr) != 0) {
            perror("attr_init cliffAttr");
        }
        if (pthread_attr_init(&visionAttr) != 0) {
            perror("attr_init cliffAttr");
        }
        if (pthread_attr_init(&OCAttr) != 0) {
            perror("attr_init cliffAttr");
        }
    
        /*
        struct sched_param cliffParam = {
            .sched_priority = 95
        };
        struct sched_param mainParam = {
            .sched_priority = 70
        };
        struct sched_param visionParam = {
            .sched_priority = 30
        };
        struct sched_param OCParam = {
            .sched_priority = 10
        };

        */
           
        pthread_attr_getschedparam(&cliffAttr, &cliffParam);
        pthread_attr_getschedparam(&mainAttr, &mainParam); 
        pthread_attr_getschedparam(&visionAttr, &visionParam);
        pthread_attr_getschedparam(&OCAttr, &OCParam);
        
        cliffParam.sched_priority = 99;
        mainParam.sched_priority = 70;
        visionParam.sched_priority = 30;
        OCParam.sched_priority = 10;


        pthread_attr_setschedparam(&cliffAttr, &cliffParam);
        pthread_attr_setschedparam(&visionAttr, &visionParam);
        pthread_attr_setschedparam(&OCAttr, &OCParam); 
        pthread_attr_setschedparam(&mainAttr, &mainParam);

        cout << "Test" << endl;

        /*
        pthread_attr_setinheritsched(&cliffAttr, PTHREAD_EXPLICIT_SCHED);
        pthread_attr_setinheritsched(&visionAttr, PTHREAD_EXPLICIT_SCHED);  
        pthread_attr_setinheritsched(&OCAttr, PTHREAD_EXPLICIT_SCHED);  
        pthread_attr_setinheritsched(&mainAttr, PTHREAD_EXPLICIT_SCHED); 
        */

        cout << "After" << endl; 

        pthread_attr_setschedpolicy(&cliffAttr, SCHED_RR); 
        pthread_attr_setschedpolicy(&visionAttr, SCHED_RR);
        pthread_attr_setschedpolicy(&OCAttr, SCHED_RR);
        pthread_attr_setschedpolicy(&mainAttr, SCHED_RR);

        RobotSafetyStruct thread_info;
        thread_info.speed = speed;
        thread_info.robot = &robot;
        thread_info.stream_mutex = &stream_mutex;

        /*
        if (pthread_create(&overcurrent_thread, &OCAttr, &RobotSafety::overcurrent, &thread_info) != 0) {
            perror("pthread_create overcurrent_thread");
            return -1;
        }
        */
		if (pthread_create(&main_thread, &mainAttr, &mainThread, &thread_info) != 0) {
            perror("pthread_create main_thread");
            return -1;
        }
        /*
		if (pthread_create(&cliff_wheelDrop_thread, &cliffAttr, &RobotSafety::cliffWheelDrop, &thread_info) != 0) {
            perror("pthread_create cliff_wheelDrop_thread");
            return -1;
        }
        if (pthread_create(&objectID, &visionAttr, &RobotVision::objectIdentification, &thread_info) != 0) {
            perror("pthread_create objectID_thread");
            return -1;
        }
        */

        cout << "After Create" << endl;
        sleep(10);

        //pthread_join(overcurrent_thread, NULL);
        pthread_join(main_thread, NULL);
        //pthread_join(cliff_wheelDrop_thread, NULL);
        //pthread_join(objectID, NULL);

        pthread_attr_destroy(&cliffAttr);
        pthread_attr_destroy(&visionAttr);
        pthread_attr_destroy(&OCAttr);
        pthread_attr_destroy(&mainAttr);
    		robot.sendDriveCommand(0, Create::DRIVE_STRAIGHT);
    }	
  	catch (InvalidArgument& e)
  	{
  	  	cerr << e.what () << endl;
    	return 3;
  	}
  	catch (CommandNotAvailable& e)
  	{
  		cerr << e.what () << endl;
    	return 4;
  	}
  	cout << "Hi" << endl;	
}
 
